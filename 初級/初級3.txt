作業目次

1.ログイン認証機能

2.ユーザー登録機能

3.商品購入機能

4.購入履歴機能トの作成
作成機能一覧

UserCreateAction.javaの作成

1 UserCreateAction.java

1 「com.internousdev.template.action」を選択
し、「右クリック」「新規」「クラス」を選択しま
す。

2 「名前(M):」欄に「UserCreateAction」を入
力し、完了ボタンをクリックします。

UserCreateAction.javaの作成

3 以下の内容を写経します。

UserCreateAction.java
(javaファイル)

package com.internousdev.template.action;
import com.opensymphony.xwork2.ActionSupport;
public class UserCreateAction extends ActionSupport {

public String execute() {
return SUCCESS;

}

}

userCreate.jspの作成

1 「プロジェクト」「WebContent」を選択し、
「右クリック」「新規」「JSPファイル」を選択し
ます。

2 「名前(M):」欄に「userCreate.jsp」
を入力し、完了ボタンをクリックします。

2 userCreate.jsp

userCreate.jspの作成

3 以下の内容を写経します。

userCreate.jsp(jspファイル)
<%@ page language="java" contentType="text/html; charset=UTF-8"

pageEncoding="UTF-8"%>

<%@ taglib prefix="s" uri="/struts-tags"%>
<!DOCTYPE html>
<html>
<head>

<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Script-Type" content="text/javascript" />
<meta http-equiv="imagetoolbar" content="no" />
<meta name="description" content="" />
<meta name="keywords" content="" />
<title>UserCreate画面</title>
<style type="text/css">
/* ========TAG LAYOUT======== */

次へ続きます。

userCreate.jspの作成

body {
margin:0;
padding:0;
line-height:1.6;
letter-spacing:1px;
font-family:Verdana, Helvetica, sans-serif;
font-size:12px;
color:#333;
background:#fff;
}
table {
text-align:center;
margin:0 auto;
}
/* ========ID LAYOUT======== */
#top {
width:780px;
margin:30px auto;
前の続きです。

次へ続きます。

userCreate.jspの作成

border:1px solid #333;
}
#header {
width: 100%;
height: 80px;
background-color: black;
}
#main {
width: 100%;
height: 500px;
text-align: center;
}
#footer {
width: 100%;
height: 80px;
background-color: black;
clear:both;
}

前の続きです。

次へ続きます。

userCreate.jspの作成

</style>

</head>
<body>

<div id="header">

<div id="pr">
</div>

</div>
<div id="main">

<div id="top">
<p>UserCreate</p>

</div>
<div>

<s:if test="errorMessage != ''”>

<s:property value="errorMessage" escape="false" />

</s:if>
<table>
<s:form action="UserCreateConfirmAction">

前の続きです。

次へ続きます。

userCreate.jspの作成

<tr>

<td>

<label>ログインID:</label>

</td>
<td>
<input type="text" name="loginUserId" value="" />
</td>

</tr>
<tr>

<td>

<label>ログインPASS:</label>

</td>
<td>
<input type="text" name="loginPassword" value="" />
</td>

</tr>

前の続きです。

次へ続きます。

userCreate.jspの作成

<tr>

<td>

<label>ユーザー名:</label>

</td>
<td>

<input type="text" name="userName" value="" />

</td>

</tr>
<s:submit value="登録"/>

</s:form>
</table>

前の続きです。

次へ続きます。

userCreate.jspの作成

<div>

<span>前画面に戻る場合は</span>
<a href='<s:url action="HomeAction" />'>こちら</a>

</div>

</div>

</div>
<div id="footer">

<div id="pr">
</div>

</div>

</body>
</html>

前の続きです。

この後、struts.xmlにUserCreateActionの<action>タグ部分を書き足します。(2時間目11ページを参照)

userCreateAction機能の確認

userCreate.jspの画面

templateプロジェクトを実行し、login.jsp画面のリンクから上記のuserCreate.jsp画面が表示できれば成功です。

UserCreateConfirmAction.javaの作成

3 UserCreateConfirmAction.java

1 「com.internousdev.template.action」を選択
し、「右クリック」「新規」「クラス」を選択しま
す。

2 「名前(M):」欄に「UserCreateConfirmAction」
を入力し、完了ボタンをクリックします。

UserCreateConfirmAction.javaの作成

3 以下の内容を写経します。

UserCreateConfirmAction.java

(javaファイル)

package com.internousdev.template.action;
import java.util.Map;
import org.apache.struts2.interceptor.SessionAware;
import com.opensymphony.xwork2.ActionSupport;
public class UserCreateConfirmAction extends ActionSupport implements SessionAware {

private String loginUserId;
private String loginPassword;
private String userName;
public Map<String,Object> session;
private String errorMessage;
public String execute() {

String result = SUCCESS;

次へ続きます。

UserCreateConfirmAction.javaの作成

if(!(loginUserId.equals(""))
&& !(loginPassword.equals(""))
&& !(userName.equals(""))) {

session.put("loginUserId"

, loginUserId);

session.put("loginPassword"

, loginPassword);

session.put("userName"

, userName);

} else {

setErrorMessage("未入力の項目があります。
");

result = ERROR;

}
return result;

}

前の続きです。

次へ続きます。

確認画面で表示したい値を
セッションに格納します。

未入力項目の有無を
確認しています。

UserCreateConfirmAction.javaの作成

public String getLoginUserId() {

return loginUserId;

}
public void setLoginUserId(String loginUserId) {

this.loginUserId = loginUserId;

}
public String getLoginPassword() {

return loginPassword;

}
public void setLoginPassword(String loginPassword) {

this.loginPassword = loginPassword;

}

前の続きです。

次へ続きます。

UserCreateConfirmAction.javaの作成

public String getUserName() {

return userName;

}
public void setUserName(String userName) {

this.userName = userName;

}
public Map<String, Object> getSession() {

return session;

}
@Override
public void setSession(Map<String, Object> session) {

this.session = session;

}
public String getErrorMessage() {

return errorMessage;

}
public void setErrorMessage(String errorMassage) {

this.errorMessage = errorMassage;

}

}

前の続きです。

userCreateConfirm.jspの作成

1 「プロジェクト」「WebContent」を選択し、
「右クリック」「新規」「JSPファイル」を選択し
ます。

2 「名前(M):」欄に「userCreateConfirm.jsp」
を入力し、完了ボタンをクリックします。

4 userCreateConfirm.jsp

userCreateConfirm.jspの作成

3 以下の内容を写経します。

<%@ page language="java" contentType="text/html; charset=UTF-8"

pageEncoding="UTF-8"%>

<%@ taglib prefix="s" uri="/struts-tags"%>
<!DOCTYPE html>
<html>
<head>

<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Script-Type" content="text/javascript" />
<meta http-equiv="imagetoolbar" content="no" />
<meta name="description" content="" />
<meta name="keywords" content="" />
<title>UserCreateConfirm画面</title>
<style type="text/css">
/* ========TAG LAYOUT======== */

次へ続きます。

UserCreateConfirm.jsp
(jspファイル)

userCreateConfirm.jspの作成

body {
margin:0;
padding:0;
line-height:1.6;
letter-spacing:1px;
font-family:Verdana, Helvetica, sans-serif;
font-size:12px;
color:#333;
background:#fff;
}
table {
text-align:center;
margin:0 auto;
}
/* ========ID LAYOUT======== */
#top {
width:780px;
margin:30px auto;
前の続きです。

次へ続きます。

userCreateConfirm.jspの作成

border:1px solid #333;
}
#header {
width: 100%;
height: 80px;
background-color: black;
}
#main {
width: 100%;
height: 500px;
text-align: center;
}
#footer {
width: 100%;
height: 80px;
background-color: black;
clear:both;
}

前の続きです。

次へ続きます。

userCreateConfirm.jspの作成

</style>

</head>
<body>

<div id="header">

<div id="pr">
</div>

</div>
<div id="main">

<div id="top">

<p>UserCreateConfirm</p>

</div>
<div>

<h3>登録する内容は以下でよろしいですか。</h3>
<table>

<s:form action="UserCreateCompleteAction">

前の続きです。

次へ続きます。

userCreateConfirm.jspの作成

<tr id="box">

<td>

<label>ログインID:</label>

</td>
<td>

<s:property value="loginUserId" escape="false" />

</td>

</tr>
<tr id="box">

<td>

<label>ログインPASS:</label>

</td>
<td>

<s:property value="loginPassword" escape="false" />

</td>

</tr>

前の続きです。

次へ続きます。

userCreateConfirm.jspの作成

<tr id="box">
<td>
<label>ユーザー名:</label>
</td>
<td>
<s:property value="userName" escape="false" />
</td>
</tr>
<tr>
<td>
<s:submit value="完了" />
</td>
</tr>
</s:form>

</table>

</div>

</div>

前の続きです。

次へ続きます。

userCreateConfirm.jspの作成

<div id="footer">

<div id="pr">
</div>

</div>

</body>
</html>

前の続きです。

この後、struts.xmlにUserCreateConfirmActionの<action>タグ部分を書き足します。(2時間目11ページを参照)

userCreateConfirmAction機能の確認

userCreateConfirm.jspの画面

templateプロジェクトを実行し、userCreate画面の登録ボタンから上記のuserCreateConfirm.jsp画面が表示できれば成功です。

DateUtil.javaの作成

5 DateUtil.java

1 「com.internousdev.action」を選択し、
「右クリック」「新規」「クラス」を選択します。
1 「com.internousdev.template.util」を選択し
、「右クリック」「新規」「クラス」を選択します
。

2 「名前(M):」欄に「DateUtil.java」
を入力し、完了ボタンをクリックします。

DateUtil.javaの作成

3 以下の内容を写経します。

DateUtil.java
(javaファイル)

package com.internousdev.template.util;
import java.text.SimpleDateFormat;
import java.util.Date;
public class DateUtil {

public String getDate() {

Date date = new Date();
SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
return simpleDateFormat.format(date);

}

}

UserCreateCompleteDAO.javaの作成

6 UserCreateCompleteDAO.java

1 「com.internousdev.template.dao」を選択し
、「右クリック」「新規」「クラス」を選択します
。

2 「名前(M):」欄に「UserCreateCompleteDAO」
を入力し、完了ボタンをクリックします。

UserCreateCompleteDAO.javaの作成

3 以下の内容を写経します。

UserCreateCompleteDAO.java

(javaファイル)

package com.internousdev.template.dao;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import com.internousdev.template.util.DBConnector;
import com.internousdev.template.util.DateUtil;
public class UserCreateCompleteDAO{

private DateUtil dateUtil = new DateUtil();
private String sql = "INSERT INTO login_user_transaction (login_id, login_pass, user_name,

insert_date) VALUES(?, ? ,?, ?)";

public void createUser(String loginUserId, String loginUserPassword, String userName) throws

SQLException {

DBConnector dbConnector = new DBConnector();
Connection connection = dbConnector.getConnection();

次へ続きます。

UserCreateCompleteDAO.javaの作成

try {

PreparedStatement preparedStatement = connection.prepareStatement(sql);
preparedStatement.setString(1, loginUserId);
preparedStatement.setString(2, loginUserPassword);
preparedStatement.setString(3, userName);
preparedStatement.setString(4, dateUtil.getDate());
preparedStatement.execute();
} catch(Exception e) {

e.printStackTrace();
} finally {
connection.close();

}

}

}

前の続きです。

userCreateComplete.jspの作成

1 「プロジェクト」「WebContent」を選択し、
「右クリック」「新規」「JSPファイル」を選択し
ます。

2 「名前(M):」欄に「userCreateComplete.jsp」
を入力し、完了ボタンをクリックします。

7 userCreateComplete.jsp

userCreateComplete.jspの作成

3 以下の内容を写経します。

<%@ page language="java" contentType="text/html; charset=UTF-8"

pageEncoding="UTF-8"%>

<%@ taglib prefix="s" uri="/struts-tags"%>
<!DOCTYPE html>
<html>
<head>

<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Script-Type" content="text/javascript" />
<meta http-equiv="imagetoolbar" content="no" />
<meta name="description" content="" />
<meta name="keywords" content="" />
<title>UserCreateComplete画面</title>
<style type="text/css">
/* ========TAG LAYOUT======== */

次へ続きます。

UserCreateComplete.jsp
(jspファイル)

userCreateComplete.jspの作成

body {
margin:0;
padding:0;
line-height:1.6;
letter-spacing:1px;
font-family:Verdana, Helvetica, sans-serif;
font-size:12px;
color:#333;
background:#fff;
}
table {
text-align:center;
margin:0 auto;
}
/* ========ID LAYOUT======== */
#top {
width:780px;
margin:30px auto;
前の続きです。

次へ続きます。

userCreateComplete.jspの作成

border:1px solid #333;
}
#header {
width: 100%;
height: 80px;
background-color: black;
}
#main {
width: 100%;
height: 500px;
text-align: center;
}
#footer {
width: 100%;
height: 80px;
background-color: black;
clear:both;
}

前の続きです。

次へ続きます。

userCreateComplete.jspの作成

</style>

</head>
<body>

<div id="header">

<div id="pr">
</div>

</div>
<div id="main">

<div id="top">

<p>UserCreateComplete</p>

</div>
<div>

<h3>ユーザーの登録が完了致しました。</h3>
<div>

<a href='<s:url action="HomeAction" />'>ログインへ</a>

</div>

</div>

</div>

前の続きです。

次へ続きます。

userCreateComplete.jspの作成

<div id="footer">

<div id="pr">
</div>

</div>

</body>
</html>

前の続きです。

UserCreateCompleteAction.javaの作成

7 UserCreateCompleteAction.java

1 「com.internousdev.template.action」を選択
し、「右クリック」「新規」「クラス」を選択しま
す。

2 「名前(M):」欄に「UserCreateCompleteAction」
を入力し、完了ボタンをクリックします。

UserCreateCompleteAction.javaの作成

3 以下の内容を写経します。

UserCreateCompleteAction.java

(javaファイル)

package com.internousdev.template.action;
import java.sql.SQLException;
import java.util.Map;
import org.apache.struts2.interceptor.SessionAware;
import com.opensymphony.xwork2.ActionSupport;
import com.internousdev.template.dao.UserCreateCompleteDAO;
public class UserCreateCompleteAction extends ActionSupport implements SessionAware {

private String loginUserId;
private String loginPassword;
private String userName;
private Map<String,Object> session;
public String execute() throws SQLException {

UserCreateCompleteDAO userCreateCompleteDAO = new UserCreateCompleteDAO();
userCreateCompleteDAO.createUser(session.get("loginUserId").toString(),

session.get("loginPassword").toString(),
session.get("userName").toString());

次へ続きます。

DAOを経由して、
入力された内容をDBに登録します。

UserCreateCompleteAction.javaの作成

String result = SUCCESS;
return result ;

}
public String getLoginUserId() {

return loginUserId;

}
public void setLoginUserId(String loginUserId) {

this.loginUserId = loginUserId;

}
public String getLoginPassword() {

return loginPassword;

}
public void setLoginPassword(String loginPassword) {

this.loginPassword = loginPassword;

}

前の続きです。

次へ続きます。

UserCreateCompleteAction.javaの作成

public String getUserName() {

return userName;

}
public void setUserName(String userName) {

this.userName = userName;

}
public Map<String, Object> getSession() {

return session;

}
@Override
public void setSession(Map<String, Object> session) {

this.session = session;

}

前の続きです。

この後、struts.xmlにUserCreateCompleteActionの<action>タグ部分を書き足します。(2時間目12ページを参照)

userCreateComplete機能の確認

userCreateComplete.jspの画面

templateプロジェクトを実行し、userCreateConfirm画面の完了ボタンから上記のuserCreateComplete.jsp画面が表示できれば成功です。

userCreateComplete機能の確認

login_user_transactionテーブル

コマンドプロンプト等を使用し、登録したユーザが実際にlogin_user_transactionテーブルに格納されているか確認します。