web.xmlの作成

4 以下の内容に書き換えます。

web.xml(xmlファイル)
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns="http://xmlns.jcp.org/xml/ns/javaee"
xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" id="WebApp_ID" version="3.1">
<display-name>ecsite</display-name>
<welcome-file-list>
<welcome-file>home.jsp</welcome-file>
</welcome-file-list>

<filter>
<filter-name>struts2</filter-name>
<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
</filter>

次へ続きます。

プロジェクト名を設定します。
「ecsite」と書いてください。

最初に表示するJSPファイルを設定します。
初回アクセスで表示させたいJSPファイル名を
書いてください。

Struts2を使うので、以下の設定を書いて
ください。

web.xmlの作成

<filter-mapping>
<filter-name>struts2</filter-name>
<url-pattern>/*</url-pattern>
</filter-mapping>
</web-app>

前の続きです。

struts.xmlの作成

1 「Javaリソース」「src」を選択し、
「プロジェクトを右クリック」「新規」「その他」
を選択します。
2 Struts.xml

2 「ウィザード(W):」欄の「XML」「XMLファイル」
を選択し、完了ボタンをクリックします。

struts.xmlの作成

3 ファイル名(M):の欄に「struts.xml」
を入力して、完了をクリックします。

4 「Javaリソース」「src」の直下に「
struts.xml」が作成されていれば成功です。

struts.xmlの作成

5 以下の内容を写経します。

struts.xml(xmlファイル)
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE struts PUBLIC
"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
"http://struts.apache.org/dtds/struts-2.3.dtd">
<!-- Strutsの詳細設定 -->
<struts>

<constant name="struts.devMode" value="true" />
<package name="com.internousdev.ecsite.action" extends="struts-default">

<!-- GoHomeAction -->
<action name="GoHomeAction"

class="com.internousdev.ecsite.action.GoHomeAction" method="execute">

<result name="success">home.jsp</result>

</action>
<!-- HomeAction -->
<action name="HomeAction" class="com.internousdev.ecsite.action.HomeAction"

method="execute">

<result name="login">login.jsp</result>
<result name="success">buyItem.jsp</result>

</action>

呼び出されるJavaクラスファイルと実行

するメソッドを登録します。 次へ続きます。

struts.xmlの作成

<!-- LoginAction -->
<action name="LoginAction" class="com.internousdev.ecsite.action.LoginAction"

method="execute">

<result name="success">buyItem.jsp</result>
<result name="error">login.jsp</result>

</action>
<!-- UserCreateAction -->
<action name="UserCreateAction"

class="com.internousdev.ecsite.action.UserCreateAction" method="execute">
<result name="success">userCreate.jsp</result>
<result name="back">login.jsp</result>

</action>
<!-- UserCreateConfirmAction -->
<action name="UserCreateConfirmAction"

class="com.internousdev.ecsite.action.UserCreateConfirmAction" method="execute">
<result name="success">userCreateConfirm.jsp</result>
<result name="error">userCreate.jsp</result>

</action>

前の続きです。

次へ続きます。

struts.xmlの作成

<!-- UserCreateCompleteAction -->
<action name="UserCreateCompleteAction"

class="com.internousdev.ecsite.action.UserCreateCompleteAction" method="execute">
<result name="success">userCreateComplete.jsp</result>

</action>
<!-- BuyItemAction -->
<action name="BuyItemAction"

class="com.internousdev.ecsite.action.BuyItemAction" method="execute">
<result name="success">buyItemConfirm.jsp</result>
<result name="error">buyItem.jsp</result>

</action>
<!-- BuyItemConfirmAction -->
<action name="BuyItemConfirmAction"

class="com.internousdev.ecsite.action.BuyItemConfirmAction" method="execute">
<result name="success">buyItemComplete.jsp</result>
<result name="back">buyItem.jsp</result>

</action>

前の続きです。

次へ続きます。

struts.xmlの作成

<!-- BuyItemCompleteAction -->
<action name="BuyItemCompleteAction"

class="com.internousdev.ecsite.action.BuyItemCompleteAction" method="execute">

<result name="success">home.jsp</result>

</action>
<!-- MyPageAction -->
<action name="MyPageAction" class="com.internousdev.ecsite.action.MyPageAction"

method="execute">

<result name="success">myPage.jsp</result>
<result name="error">error.jsp</result>

</action>
<!-- LogoutAction -->
<action name="LogoutAction" class="com.internousdev.ecsite.action.LogoutAction"

method="execute">

<result name="success">home.jsp</result>

</action>

</package>

</struts>

前の続きです。

struts.xmlの作成

<action name="LoginAction" class="com.internousdev.ecsite.action.LoginAction"
method="execute">

<result name="success">buyItem.jsp</result>
<result name="error">home.jsp</result>

</action>

「com.internousdev.action」パッケ
ージの「LoginAction」に設定します。
「com.internousdev.ecsite.action」パッ
「LoginAction」クラスの中で「 ケージの「LoginAction」に設定します。
execute」メソッドが最初に呼び出され
ます。

「execute」メソッドの処理結果に応じ
てフロントに送る「JSPファイル」を設
定しています。

DBConnectorの作成

3 DBConnector

1 「src」「com.internousdev.ecsite.util」を選択
し、「右クリック」「新規」「クラス」を選択しま
す。 2 「名前(M):」欄に「DBConnector」
と入力し、完了ボタンをクリックします。

DBConnectorの作成

3 以下の内容を写経します。

DBConnector.java
(javaファイル)

次へ続きます。

package com.internousdev.ecsite.util;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
public class DBConnector {

private static String driverName = "com.mysql.jdbc.Driver";
private static String url = "jdbc:mysql://localhost/ecsite";
private static String user = "root";
private static String password = "mysql";
public Connection getConnection() {
Connection con = null;
try {

Class.forName(driverName);
con = (Connection) DriverManager.getConnection(url,user,password);
MySQL接続に必要な情報を設定します。

接続情報から自分のパソコンにインスト
ールされているMySQLへ接続する準備が
整います。

DBConnectorの作成

} catch(ClassNotFoundException e) {

e.printStackTrace();

} catch(SQLException e) {

e.printStackTrace();

}
return con;
}

}

前の続きです。

Mysqlに接続できたか情報を渡します。

MySQL JDBC ドライバーの配備

4 MySQL JDBC ドライバー

1 「https://dev.mysql.com/downloads/
connector/j/」にアクセスします。

2 下へスクロールして、「zip」形式の
Downloadボタンをクリックします。

MySQL JDBC ドライバーの配備

3 遷移した先の画面でも、下へスクロールし、
「No thanks, just start my download.」リンクを
クリックします。

4 「保存」ボタンをクリックします。

MySQL JDBC ドライバーの配備

5 ダウンロードが完了後「フォルダを開
く」ボタンをクリックします。

6 ダウンロードファイルが格納されてい
る「ディレクトリ」が開きます。
対象のディレクトリの中に「mysql- connector-java-x.x.xx.zip」を探します
。

MySQL JDBC ドライバーの配備

7 「mysql-connector-java-x.x.xx.zip」を
右クリックし、「解凍」または「展開」します。

8 解凍が終わると「mysql-connector-
java-x.x.xx」という名前のディレクトリ

が増えます。
「mysql-connector-java-x.x.xx」をダ
ブルクリックします。

MySQL JDBC ドライバーの配備

9 「mysql-connector-java-x.x.xx」ディレクトリ
の中に「mysql-connector-java-x.x.xx-bin.jar」
があることを確認します。

10 「プロジェクト」「WebContent」
「WEB-INF」「lib」の中に
「mysql-connector-java-x.x.xx- bin.jar」をコピーします。

SQLファイルの配備

1 「プロジェクト」の直下に「sql」ディレクトリ
を作成します。

2 「sql」の上で「右クリック」「新
規」「SQLファイル」を選択します。

SQLファイルの配備

3 「ファイル名(M):」の欄に「ecsite.sql」と入力
し、完了をクリックします。

4 SQLファイルが作成できていれば
成功です。

SQLファイルの写経

3 以下の内容を写経します。

ecsite.sql(sqlファイル)

次へ続きます。

set names utf8;
set foreign_key_checks = 0;
drop database if exists ecsite;
create database if not exists ecsite;
use ecsite;
drop table if exists login_user_transaction;
create table login_user_transaction(
id int not null primary key auto_increment,
login_id varchar(16) unique,
login_pass varchar(16),
user_name varchar(50),
insert_date datetime,
updated_date datetime
);

「ecsite」がデータベース名になります。

「login_user_transaction」がテーブル名になります。

「login_user_transaction」テーブルに情報を保存します。

struts.xmlの作成

drop table if exists item_info_transaction;
create table item_info_transaction(
id int not null primary key auto_increment,
item_name varchar(30),
item_price int,
item_stock int,
insert_date datetime,
update_date datetime
);
drop table if exists user_buy_item_transaction;
create table user_buy_item_transaction(
id int not null primary key auto_increment,
item_transaction_id int,
total_price int,
total_count int,
user_master_id varchar(16),
pay varchar(30),

前の続きです。

次へ続きます。

struts.xmlの作成

insert_date datetime,
delete_date datetime
);
INSERT INTO item_info_transaction(item_name, item_price, item_stock) VALUES("ノートBook"

, 100,

50);
INSERT INTO login_user_transaction(login_id, login_pass, user_name) VALUES("internous"
,

"internous01"
,
"test");

前の続きです。

作成したテーブルに情報を格納します。

SQLファイルの写経

drop database if exists ecsite;

create database ecsite;

use ecsite;

「user」テーブルに情報を保存します。

「com.internousdev.action」パッケ
ージの「LoginAction」に設定します。
もし「ecsite」という
データベースがあったら、削除します。

「com.internousdev.action」パッケ
ージの「LoginAction」に設定します。
「ecsite」データベースを作成
します。

「com.internousdev.action」パッケ








home.jsp(jspファイル)
<%@ page language="java" contentType="text/html; charset=UTF-8"

pageEncoding="UTF-8"%>

<%@ taglib prefix="s" uri="/struts-tags"%>
<!DOCTYPE html>
<html>
<head>

<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Script-Type" content="text/javascript" />
<meta http-equiv="imagetoolbar" content="no" />
<meta name="description" content="" />
<meta name="keywords" content="" />
<title>Home画面</title>
<style type="text/css">

body {

次へ続きます。

home.jspの作成

margin:0;
padding:0;
line-height:1.6;
letter-spacing:1px;
font-family:Verdana, Helvetica, sans-serif;
font-size:12px;
color:#333;
background:#fff;
}
table {
text-align:center;
margin:0 auto;
}
/* ========ecsite LAYOUT======== */
#top {
width:780px;
margin:30px auto;
border:1px solid #333;
}

前の続きです。

次へ続きます。

home.jspの作成

#header {
width: 100%;
height: 80px;
background-color: black;
}
#main {
width: 100%;
height: 500px;
text-align: center;
}
#footer {
width: 100%;
height: 80px;
background-color: black;
clear:both;
}
#text-center {
display: inline-block;
text-align: center;

}

前の続きです。

次へ続きます。

home.jspの作成

</style>

</head>
<body>

<div id="header">

<div id="pr">
</div>

</div>
<div id="main">

<div id="top">
<p>Home</p>

</div>
<div id=”text-center”>

<s:form action="HomeAction">

<s:submit value="商品購入"/>

</s:form>
<s:if test=”#session.id != null”>

<p>ログアウトする場合は

<a href='<s:url action="LogoutAction" />'>こちら</a></p>

</s:if>

前の続きです。

次へ続きます。

home.jspの作成

</div>

</div>
<div id="footer">

<div id="pr">
</div>

</div>

</body>
</html>

前の続きです。

home.jspの作成

home.jspの画面

上記の画面が表示できれば成功です。

HomeAction.javaの作成

1 「com.internousdev.ecsite.action」を選択し、
「右クリック」「新規」「クラス」を選択します。

2 「名前(M):」欄に「HomeAction」
を入力し、完了ボタンをクリックします。

2 HomeAction.java

HomeAction.javaの作成

HomeAction(javaファイル) 3 以下の内容を写経します。
package com.internousdev.ecsite.action;
import com.opensymphony.xwork2.ActionSupport;
import java.util.Map;
import org.apache.struts2.interceptor.SessionAware;
import com.internousdev.ecsite.dao.BuyItemDAO;
import com.internousdev.ecsite.dto.BuyItemDTO;
public class HomeAction extends ActionSupport implements SessionAware {

public Map<String, Object> session;
public String execute() {

String result = "login";
if (session.containsKey("id")) {

BuyItemDAO buyItemDAO = new BuyItemDAO();
BuyItemDTO buyItemDTO = buyItemDAO.getBuyItemInfo();
session.put("id"

, buyItemDTO.getId());

session.put("buyItem_name"

, buyItemDTO.getItemName());

session.put("buyItem_price"

, buyItemDTO.getItemPrice());

次へ続きます。

ログイン済み判定を行います。
一度ログインしている場合はログイン認証画面に遷
移させることなく、商品画面へ遷移させます。

HomeAction.javaの作成

result = SUCCESS;

}
return result;

}
@Override
public void setSession(Map<String, Object> session){

this.session = session;

}
public Map<String, Object> getSession() {

return this.session;

}

}

前の続きです。

login.jspの作成

1 「プロジェクト」「WebContent」を選択し、
「右クリック」「新規」「JSPファイル」を選択し
ます。

2 「名前(M):」欄に「login.jsp」
を入力し、完了ボタンをクリックします。

3 login.jsp

login.jspの作成

login.jsp(jspファイル) 3 以下の内容を写経します。
<%@ page language="java" contentType="text/html; charset=UTF-8"

pageEncoding="UTF-8"%>

<%@ taglib prefix="s" uri="/struts-tags"%>
<!DOCTYPE html>
<html>
<head>

<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Script-Type" content="text/javascript" />
<meta http-equiv="imagetoolbar" content="no" />
<meta name="description" content="" />
<meta name="keywords" content="" />
<title>Login画面</title>
<style type="text/css">
/* ========TAG LAYOUT======== */

body {
margin:0;
padding:0;

次へ続きます。

login.jspの作成

line-height:1.6;
letter-spacing:1px;
font-family:Verdana, Helvetica, sans-serif;
font-size:12px;
color:#333;
background:#fff;
}
table {
text-align:center;
margin:0 auto;
}
/* ========ID LAYOUT======== */
#top {
width:780px;
margin:30px auto;
border:1px solid #333;
}
#header {
width: 100%;

前の続きです。

次へ続きます。

login.jspの作成

height: 80px;
background-color: black;
}
#main {
width: 100%;
height: 500px;
text-align: center;
}
#footer {
width: 100%;
height: 80px;
background-color: black;
clear:both;
}
#text-link {
display: inline-block;
text-align: right;

}

前の続きです。

次へ続きます。

login.jspの作成

</style>

</head>
<body>

<div id="header">

<div id="pr">
</div>

</div>
<div id="main">

<div id="top">
<p>Login</p>

</div>
<div>

<h3>商品を購入する際にはログインをお願いします。</h3>
<s:form action="LoginAction">
<s:textfield name="loginUserId"/>
<s:password name="loginPassword"/>
<s:submit value="ログイン"/>

</s:form>
<br/>

前の続きです。

次へ続きます。

login.jspの作成

<div id="text-link">
<p>新規ユーザー登録は
<a href='<s:url action="UserCreateAction" />'>こちら</a></p>
<p>Homeへ戻る場合は
<a href='<s:url action="GoHomeAction" />'>こちら</a></p>

</div>

</div>

</div>
<div id="footer">

<div id="pr">
</div>

</div>

</body>
</html>

前の続きです。

login.jspの作成

login.jspの画面

上記の画面が表示できれば成功です。

LoginAction.javaの作成

1 「com.internousdev.ecsite.action」を選択し、
「右クリック」「新規」「クラス」を選択します。

2 「名前(M):」欄に「LoginAction」
を入力し、完了ボタンをクリックします。

4 LoginAction.java

LoginAction.javaの作成

LoginAction (javaファイル) 3 以下の内容を写経します。
package com.internousdev.ecsite.action;
import java.util.Map;
import org.apache.struts2.interceptor.SessionAware;
import com.internousdev.ecsite.dao.BuyItemDAO;
import com.internousdev.ecsite.dao.LoginDAO;
import com.internousdev.ecsite.dto.BuyItemDTO;
import com.internousdev.ecsite.dto.LoginDTO;
import com.opensymphony.xwork2.ActionSupport;
public class LoginAction extends ActionSupport implements SessionAware {

private String loginUserId;
private String loginPassword;
public Map<String, Object> session;
private LoginDAO loginDAO = new LoginDAO();
private LoginDTO loginDTO = new LoginDTO();
private BuyItemDAO buyItemDAO = new BuyItemDAO();

次へ続きます。

LoginAction.javaの作成

public String execute() {

String result = ERROR;
loginDTO = loginDAO.getLoginUserInfo(loginUserId, loginPassword);
session.put("loginUser"

, loginDTO);

if(((LoginDTO) session.get("loginUser")).getLoginFlg()) {

result = SUCCESS;
BuyItemDTO buyItemDTO = buyItemDAO.getBuyItemInfo();
session.put("login_user_id"

,loginDTO.getLoginId());

session.put("id"

, buyItemDTO.getId());

session.put("buyItem_name"

, buyItemDTO.getItemName());

session.put("buyItem_price"

, buyItemDTO.getItemPrice());

return result;

}
return result;

}

前の続きです。

次へ続きます。

入力値からユーザー情報の検索を行います。
ログイン認証が成功した場合、次の画面で
「商品情報」が必要なため商品情報を取得します。

LoginAction.javaの作成

public String getLoginUserId() {

return loginUserId;

}
public void setLoginUserId(String loginUserId) {

this.loginUserId = loginUserId;

}
public String getLoginPassword() {

return loginPassword;

}
public void setLoginPassword(String loginPassword) {

this.loginPassword = loginPassword;

}
@Override
public void setSession(Map<String, Object> session) {

this.session = session;

}

}

前の続きです。

LoginDAO.javaの作成

5 LoginDAO.java

1 「com.internousdev.action」を選択し、
「右クリック」「新規」「クラス」を選択します。
1 「com.internousdev.ecsite.dao」を選択し、
「右クリック」「新規」「クラス」を選択します。

2 「名前(M):」欄に「LoginDAO」
を入力し、完了ボタンをクリックします。

LoginDAO.javaの作成

3 以下の内容を写経します。

LoginDAO(javaファイル)
package com.internousdev.ecsite.dao;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import com.internousdev.ecsite.dto.LoginDTO;
import com.internousdev.ecsite.util.DBConnector;
public class LoginDAO {

private DBConnector dbConnector = new DBConnector();
private Connection connection = dbConnector.getConnection();
private LoginDTO loginDTO = new LoginDTO();
public LoginDTO getLoginUserInfo(String loginUserId, String loginPassword) {

次へ続きます。

メソッド名は処理内容を分かりやすく
するために「getLoginUserInfo」にしま
す。

LoginDAO.javaの作成

String sql = "SELECT * FROM login_user_transaction where login_id = ? AND

login_pass = ?";
try {

PreparedStatement preparedStatement = connection.prepareStatement(sql);
preparedStatement.setString(1, loginUserId);
preparedStatement.setString(2, loginPassword);
ResultSet resultSet = preparedStatement.executeQuery();
if(resultSet.next()) {

loginDTO.setLoginId(resultSet.getString("login_id"));
loginDTO.setLoginPassword(resultSet.getString("login_pass"));
loginDTO.setUserName(resultSet.getString("user_name"));
if(!(resultSet.getString("login_id").equals(null))) {

loginDTO.setLoginFlg(true);

}

前の続きです。

次へ続きます。

LoginDAO.javaの作成

}

} catch(Exception e) {

e.printStackTrace();

}
return loginDTO;

}
public LoginDTO getLoginDTO() {

return loginDTO;

}

}

前の続きです。

BuyItemDAO.javaの作成

6 BuyItemDAO.java

1 「com.internousdev.action」を選択し、
「右クリック」「新規」「クラス」を選択します。
1 「com.internousdev.ecsite.dao」を選択し、
「右クリック」「新規」「クラス」を選択します。

2 「名前(M):」欄に「BuyItemDAO」
を入力し、完了ボタンをクリックします。

BuyItemDAO.javaの作成

3 以下の内容を写経します。

BuyItemDAO(javaファイル)
package com.internousdev.ecsite.dao;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import com.internousdev.ecsite.dto.BuyItemDTO;
import com.internousdev.ecsite.util.DBConnector;
public class BuyItemDAO {

private DBConnector dbConnector = new DBConnector();
private Connection connection = dbConnector.getConnection();
private BuyItemDTO buyItemDTO = new BuyItemDTO();
public BuyItemDTO getBuyItemInfo() {

String sql = "SELECT id, item_name, item_price FROM item_info_transaction";
try {

PreparedStatement preparedStatement = connection.prepareStatement(sql);
ResultSet resultSet = preparedStatement.executeQuery();

次へ続きます。

メソッド名は処理内容を分かりやすく
するために「getBuyItemInfo」にします。

BuyItemDAO.javaの作成

if(resultSet.next()) {

buyItemDTO.setId(resultSet.getInt("id"));
buyItemDTO.setItemName(resultSet.getString("item_name"));
buyItemDTO.setItemPrice(resultSet.getString("item_price"));

}

} catch(Exception e) {

e.printStackTrace();

}
return buyItemDTO;

}
public BuyItemDTO getBuyItemDTO() {

return buyItemDTO;

}

}

前の続きです。

BuyItemDTO.javaの作成

7 BuyItemDTO.java

1 「com.internousdev.action」を選択し、
「右クリック」「新規」「クラス」を選択します。
1 「com.internousdev.ecsite.dto」を選択し、
「右クリック」「新規」「クラス」を選択します。

2 「名前(M):」欄に「BuyItemDTO」
を入力し、完了ボタンをクリックします。

BuyItemDTO.javaの作成

3 以下の内容を写経します。

BuyItemDTO(javaファイル)
package com.internousdev.ecsite.dto;
public class BuyItemDTO {

public int id;
public String itemName;
public String itemPrice;
public String getItemName() {

return itemName;

}
public void setItemName(String itemName) {

this.itemName = itemName;

}

次へ続きます。

メソッド名は処理内容を分かりやすく
するために「getBuyItemInfo」にします。

BuyItemDTO.javaの作成

public String getItemPrice() {

return itemPrice;

}
public void setItemPrice(String itemPrice) {
this.itemPrice = itemPrice;

}
public int getId() {
return id;

}
public void setId(int id) {
this.id = id;

}

}

前の続きです。

buyItem.jspの作成

1 「プロジェクト」「WebContent」を選択し、
「右クリック」「新規」「JSPファイル」を選択し
ます。

2 「名前(M):」欄に「buyItem.jsp」
を入力し、完了ボタンをクリックします。

8 buyItem.jsp

buyItem.jspの作成

buyItem.jsp(jspファイル) 3 以下の内容を写経します。
<%@ page language="java" contentType="text/html; charset=UTF-8"

pageEncoding="UTF-8"%>

<%@ taglib prefix="s" uri="/struts-tags"%>
<!DOCTYPE html>
<html>
<head>

<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Script-Type" content="text/javascript" />
<meta http-equiv="imagetoolbar" content="no" />
<meta name="description" content="" />
<meta name="keywords" content="" />
<title>BuyItem画面</title>
<style type="text/css">
/* ========TAG LAYOUT======== */

body {
margin:0;
padding:0;

次へ続きます。

buyItem.jspの作成

line-height:1.6;
letter-spacing:1px;
font-family:Verdana, Helvetica, sans-serif;
font-size:12px;
color:#333;
background:#fff;
}
table {
text-align:center;
margin:0 auto;
}
/* ========ID LAYOUT======== */
#top {
width:780px;
margin:30px auto;
border:1px solid #333;
}
#header {
width: 100%;

前の続きです。

次へ続きます。

buyItem.jspの作成

height: 80px;
background-color: black;
}
#main {
width: 100%;
height: 500px;
text-align: center;
}
#footer {
width: 100%;
height: 80px;
background-color: black;
clear:both;
}
</style>

</head>
<body>

前の続きです。

次へ続きます。

buyItem.jspの作成

<div id="header">

<div id="pr">
</div>

</div>
<div id="main">

<div id="top">
<p>BuyItem</p>

</div>
<div>

<s:form action="BuyItemAction">
<table>
<tr>

<td>

<span>商品名</span>

</td>
<td>

<s:property value="session.buyItem_name" /><br>

</td>

</tr>

前の続きです。

次へ続きます。

buyItem.jspの作成

<tr>

<td>

<span>値段</span>

</td>
<td>

<s:property value="session.buyItem_price" /><span>円</span>

</td>

</tr>
<tr>

<td>

<span>購入個数</span>

</td>
<td>

前の続きです。

次へ続きます。

buyItem.jspの作成

<select name="count">

<option value="1" selected="selected">1</option>
<option value="2">2</option>
<option value="3">3</option>
<option value="4">4</option>
<option value="5">5</option>

</select>

</td>

</tr>
<tr>

<td>

<span>支払い方法</span>

</td>
<td>

<input type="radio" name="pay" value="1" checked="checked">現

金払い

<input type="radio" name="pay" value="2">クレジットカード

</td>

</tr>

前の続きです。

次へ続きます。

buyItem.jspの作成

<tr>

<td>

<s:submit value="購入"/>

</td>

</tr>
</table>

</s:form>
<div>

<p>前画面に戻る場合は<a href='<s:url action="GoHomeAction" />'>こ

ちら</a></p>

<p>マイぺージは<a href='<s:url action="MyPageAction" />'>こちら

</a></p>

</div>

</div>

</div>

前の続きです。

次へ続きます。

buyItem.jspの作成

<div id="footer">

<div id="pr">
</div>

</div>

</body>
</html>

前の続きです。

buyItem.jspの作成

buyItem.jspの画面

上記の画面が表示できれば成功です。

GoHomeAction.javaの作成

1 「com.internousdev.ecsite.action」を選択し、
「右クリック」「新規」「クラス」を選択します。

2 「名前(M):」欄に「GoHomeAction」
を入力し、完了ボタンをクリックします。

9 GoHomeAction.java

GoHomeAction.javaの作成

GoHomeAction(javaファイル) 3 以下の内容を写経します。
package com.internousdev.ecsite.action;
import com.opensymphony.xwork2.ActionSupport;
import java.util.Map;
import org.apache.struts2.interceptor.SessionAware;
public class GoHomeAction extends ActionSupport implements SessionAware {

public Map<String, Object> session;
public String execute() {
return SUCCESS;

}
public Map<String, Object> getSession() {

return this.session;

}
@Override
public void setSession(Map<String, Object> session) {

this.session = session;





UserCreateAction.javaの作成

1 UserCreateAction.java

1 「com.internousdev.ecsite.action」を選択し、
「右クリック」「新規」「クラス」を選択します。

2 「名前(M):」欄に「UserCreateAction」を入
力し、完了ボタンをクリックします。

UserCreateAction.javaの作成

3 以下の内容を写経します。

UserCreateAction.java
(javaファイル)

package com.internousdev.ecsite.action;
import com.opensymphony.xwork2.ActionSupport;
public class UserCreateAction extends ActionSupport {

public String execute() {
return SUCCESS;

}

}

userCreate.jspの作成

1 「プロジェクト」「WebContent」を選択し、
「右クリック」「新規」「JSPファイル」を選択し
ます。

2 「名前(M):」欄に「userCreate.jsp」
を入力し、完了ボタンをクリックします。

2 userCreate.jsp

userCreate.jspの作成

3 以下の内容を写経します。

userCreate.jsp(jspファイル)
<%@ page language="java" contentType="text/html; charset=UTF-8"

pageEncoding="UTF-8"%>

<%@ taglib prefix="s" uri="/struts-tags"%>
<!DOCTYPE html>
<html>
<head>

<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Script-Type" content="text/javascript" />
<meta http-equiv="imagetoolbar" content="no" />
<meta name="description" content="" />
<meta name="keywords" content="" />
<title>UserCreate画面</title>
<style type="text/css">
/* ========TAG LAYOUT======== */

次へ続きます。

userCreate.jspの作成

body {
margin:0;
padding:0;
line-height:1.6;
letter-spacing:1px;
font-family:Verdana, Helvetica, sans-serif;
font-size:12px;
color:#333;
background:#fff;
}
table {
text-align:center;
margin:0 auto;
}
/* ========ID LAYOUT======== */
#top {
width:780px;
margin:30px auto;
前の続きです。

次へ続きます。

userCreate.jspの作成

border:1px solid #333;
}
#header {
width: 100%;
height: 80px;
background-color: black;
}
#main {
width: 100%;
height: 500px;
text-align: center;
}
#footer {
width: 100%;
height: 80px;
background-color: black;
clear:both;
}

前の続きです。

次へ続きます。

userCreate.jspの作成

</style>

</head>
<body>

<div id="header">

<div id="pr">
</div>

</div>
<div id="main">

<div id="top">
<p>UserCreate</p>

</div>
<div>

<s:if test="errorMassage != ''">

<s:property value="errorMassage" escape="false" />

</s:if>
<table>
<s:form action="UserCreateConfirmAction">

前の続きです。

次へ続きます。

userCreate.jspの作成

<tr>

<td>

<label>ログインID:</label>

</td>
<td>
<input type="text" name="loginUserId" value="" />
</td>

</tr>
<tr>

<td>

<label>ログインPASS:</label>

</td>
<td>
<input type="text" name="loginPassword" value="" />
</td>

</tr>

前の続きです。

次へ続きます。

userCreate.jspの作成

<tr>

<td>

<label>ユーザー名:</label>

</td>
<td>

<input type="text" name="userName" value="" />

</td>

</tr>
<s:submit value="登録"/>

</s:form>
</table>

前の続きです。

次へ続きます。

userCreate.jspの作成

<div>

<span>前画面に戻る場合は</span>
<a href='<s:url action="HomeAction" />'>こちら</a>

</div>

</div>

</div>
<div id="footer">

<div id="pr">
</div>

</div>

</body>
</html>

前の続きです。

userCreate.jspの作成

userCreate.jspの画面

上記の画面が表示できれば成功です。

UserCreateConfirmAction.javaの作成

3 UserCreateConfirmAction.java

1 「com.internousdev.ecsite.action」を選択し、
「右クリック」「新規」「クラス」を選択します。

2 「名前(M):」欄に「UserCreateConfirmAction」
を入力し、完了ボタンをクリックします。

UserCreateConfirmAction.javaの作成

3 以下の内容を写経します。

UserCreateConfirmAction.java

(javaファイル)

package com.internousdev.ecsite.action;
import java.util.Map;
import org.apache.struts2.interceptor.SessionAware;
import com.opensymphony.xwork2.ActionSupport;
public class UserCreateConfirmAction extends ActionSupport implements SessionAware {

private String loginUserId;
private String loginPassword;
private String userName;
public Map<String,Object> session;
private String errorMassage;
public String execute() {

String result = SUCCESS;

次へ続きます。

UserCreateConfirmAction.javaの作成

if(!(loginUserId.equals(""))
&& !(loginPassword.equals(""))
&& !(userName.equals(""))) {

session.put("loginUserId"

, loginUserId);

session.put("loginPassword"

, loginPassword);

session.put("userName"

, userName);

} else {

setErrorMassage("未入力の項目があります。
");

result = ERROR;

}
return result;

}

前の続きです。

次へ続きます。

確認画面で表示したい値を
セッションに格納します。

未入力項目の有無を
確認しています。

UserCreateConfirmAction.javaの作成

public String getLoginUserId() {

return loginUserId;

}
public void setLoginUserId(String loginUserId) {

this.loginUserId = loginUserId;

}
public String getLoginPassword() {

return loginPassword;

}
public void setLoginPassword(String loginPassword) {

this.loginPassword = loginPassword;

}

前の続きです。

次へ続きます。

UserCreateConfirmAction.javaの作成

public String getUserName() {

return userName;

}
public void setUserName(String userName) {

this.userName = userName;

}
@Override
public void setSession(Map<String, Object> session) {

this.session = session;

}
public String getErrorMassage() {

return errorMassage;

}
public void setErrorMassage(String errorMassage) {

this.errorMassage = errorMassage;

}

}

前の続きです。

userCreateConfirm.jspの作成

1 「プロジェクト」「WebContent」を選択し、
「右クリック」「新規」「JSPファイル」を選択し
ます。

2 「名前(M):」欄に「userCreateConfirm.jsp」
を入力し、完了ボタンをクリックします。

4 userCreateConfirm.jsp

userCreateConfirm.jspの作成

3 以下の内容を写経します。

<%@ page language="java" contentType="text/html; charset=UTF-8"

pageEncoding="UTF-8"%>

<%@ taglib prefix="s" uri="/struts-tags"%>
<!DOCTYPE html>
<html>
<head>

<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Script-Type" content="text/javascript" />
<meta http-equiv="imagetoolbar" content="no" />
<meta name="description" content="" />
<meta name="keywords" content="" />
<title>UserCreateConfirm画面</title>
<style type="text/css">
/* ========TAG LAYOUT======== */

次へ続きます。

UserCreateConfirm.jsp
(jspファイル)

userCreateConfirm.jspの作成

body {
margin:0;
padding:0;
line-height:1.6;
letter-spacing:1px;
font-family:Verdana, Helvetica, sans-serif;
font-size:12px;
color:#333;
background:#fff;
}
table {
text-align:center;
margin:0 auto;
}
/* ========ID LAYOUT======== */
#top {
width:780px;
margin:30px auto;
前の続きです。

次へ続きます。

userCreateConfirm.jspの作成

border:1px solid #333;
}
#header {
width: 100%;
height: 80px;
background-color: black;
}
#main {
width: 100%;
height: 500px;
text-align: center;
}
#footer {
width: 100%;
height: 80px;
background-color: black;
clear:both;
}

前の続きです。

次へ続きます。

userCreateConfirm.jspの作成

</style>

</head>
<body>

<div id="header">

<div id="pr">
</div>

</div>
<div id="main">

<div id="top">

<p>UserCreateConfirm</p>

</div>
<div>

<h3>登録する内容は以下でよろしいですか。</h3>
<table>

<s:form action="UserCreateCompleteAction">

前の続きです。

次へ続きます。

userCreateConfirm.jspの作成

<tr id="box">

<td>

<label>ログインID:</label>

</td>
<td>

<s:property value="loginUserId" escape="false" />

</td>

</tr>
<tr id="box">

<td>

<label>ログインPASS:</label>

</td>
<td>

<s:property value="loginPassword" escape="false" />

</td>

</tr>

前の続きです。

次へ続きます。

userCreateConfirm.jspの作成

<tr id="box">
<td>
<label>ユーザー名:</label>
</td>
<td>
<s:property value="userName" escape="false" />
</td>
</tr>
<tr>
<td>
<s:submit value="完了" />
</td>
</tr>
</s:form>

</table>

</div>

</div>

前の続きです。

次へ続きます。

userCreateConfirm.jspの作成

<div id="footer">

<div id="pr">
</div>

</div>

</body>
</html>

前の続きです。

userCreateConfirm.jspの作成

userCreateConfirm.jspの画面

上記の画面が表示できれば成功です。

UserCreateCompleteAction.javaの作成

5 UserCreateCompleteAction.java

1 「com.internousdev.ecsite.action」を選択し、
「右クリック」「新規」「クラス」を選択します。

2 「名前(M):」欄に「UserCreateCompleteAction」
を入力し、完了ボタンをクリックします。

UserCreateCompleteAction.javaの作成

3 以下の内容を写経します。

UserCreateCompleteAction.java

(javaファイル)

package com.internousdev.ecsite.action;
import java.sql.SQLException;
import java.util.Map;
import org.apache.struts2.interceptor.SessionAware;
import com.opensymphony.xwork2.ActionSupport;
import com.internousdev.ecsite.dao.UserCreateCompleteDAO;
public class UserCreateCompleteAction extends ActionSupport implements SessionAware {

private String loginUserId;
private String loginPassword;
private String userName;
public Map<String,Object> session;
private UserCreateCompleteDAO userCreateCompleteDAO = new UserCreateCompleteDAO();
public String execute() throws SQLException {

次へ続きます。

UserCreateCompleteAction.javaの作成

userCreateCompleteDAO.cerateUser(session.get("loginUserId").toString(),

session.get("loginPassword").toString(),
session.get("userName").toString());

String result = SUCCESS;
return result ;

}
public String getLoginUserId() {

return loginUserId;

}
public void setLoginUserId(String loginUserId) {

this.loginUserId = loginUserId;

}

前の続きです。

次へ続きます。

DAOを経由して、
入力された内容をDBに登録します。

UserCreateCompleteAction.javaの作成

public String getLoginPassword() {

return loginPassword;

}
public void setLoginPassword(String loginPassword) {

this.loginPassword = loginPassword;

}
public String getUserName() {

return userName;

}
public void setUserName(String userName) {

this.userName = userName;

}
@Override
public void setSession(Map<String, Object> session) {

this.session = session;

}

前の続きです。

DateUtil.javaの作成

DateUtil.java

1 「com.internousdev.action」を選択し、
「右クリック」「新規」「クラス」を選択します。
1 「com.internousdev.ecsite.util」を選択し、「
右クリック」「新規」「クラス」を選択します。

2 「名前(M):」欄に「DateUtil.java」
を入力し、完了ボタンをクリックします。

DateUtil.javaの作成

3 以下の内容を写経します。

DateUtil.java
(javaファイル)

package com.internousdev.ecsite.util;
import java.text.SimpleDateFormat;
import java.util.Date;
public class DateUtil {

public String getDate() {

Date date = new Date();
SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy/MM/dd

HH:mm:ss");

return simpleDateFormat.format(date);

}

}

UserCreateCompleteAction.javaの作成

public String getLoginPassword() {

return loginPassword;

}
public void setLoginPassword(String loginPassword) {

this.loginPassword = loginPassword;

}
public String getUserName() {

return userName;

}
public void setUserName(String userName) {

this.userName = userName;

}
@Override
public void setSession(Map<String, Object> session) {

this.session = session;

}

前の続きです。

UserCreateCompleteDAO.javaの作成

6 UserCreateCompleteDAO.java

1 「com.internousdev.ecsite.dao」を選択し、「
右クリック」「新規」「クラス」を選択します。

2 「名前(M):」欄に「UserCreateCompleteDAO」
を入力し、完了ボタンをクリックします。

UserCreateCompleteDAO.javaの作成

3 以下の内容を写経します。

UserCreateCompleteDAO.java

(javaファイル)

package com.internousdev.ecsite.dao;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import com.internousdev.ecsite.util.DBConnector;
import com.internousdev.ecsite.util.DateUtil;
public class UserCreateCompleteDAO{

private DBConnector dbConnector = new DBConnector();
private Connection connection = dbConnector.getConnection();
private DateUtil dateUtil = new DateUtil();
private String sql = "INSERT INTO login_user_transaction (login_id, login_pass, user_name,

insert_date) VALUES(?, ? ,?, ?)";

public void cerateUser(String loginUserId, String loginUserPassword, String userName) throws

SQLException {

次へ続きます。

UserCreateCompleteDAO.javaの作成

try {

PreparedStatement preparedStatement = connection.prepareStatement(sql);
preparedStatement.setString(1, loginUserId);
preparedStatement.setString(2, loginUserPassword);
preparedStatement.setString(3, userName);
preparedStatement.setString(4, dateUtil.getDate());
preparedStatement.execute();
} catch(Exception e) {

e.printStackTrace();
} finally {
connection.close();

}

}

}

前の続きです。

userCreateComplete.jspの作成

1 「プロジェクト」「WebContent」を選択し、
「右クリック」「新規」「JSPファイル」を選択し
ます。

2 「名前(M):」欄に「userCreateComplete.jsp」
を入力し、完了ボタンをクリックします。

7 userCreateComplete.jsp

userCreateComplete.jspの作成

3 以下の内容を写経します。

<%@ page language="java" contentType="text/html; charset=UTF-8"

pageEncoding="UTF-8"%>

<%@ taglib prefix="s" uri="/struts-tags"%>
<!DOCTYPE html>
<html>
<head>

<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Script-Type" content="text/javascript" />
<meta http-equiv="imagetoolbar" content="no" />
<meta name="description" content="" />
<meta name="keywords" content="" />
<title>UserCreateComplete画面</title>
<style type="text/css">
/* ========TAG LAYOUT======== */

次へ続きます。

UserCreateComplete.jsp
(jspファイル)

userCreateComplete.jspの作成

body {
margin:0;
padding:0;
line-height:1.6;
letter-spacing:1px;
font-family:Verdana, Helvetica, sans-serif;
font-size:12px;
color:#333;
background:#fff;
}
table {
text-align:center;
margin:0 auto;
}
/* ========ID LAYOUT======== */
#top {
width:780px;
margin:30px auto;
前の続きです。

次へ続きます。

userCreateConfirm.jspの作成

border:1px solid #333;
}
#header {
width: 100%;
height: 80px;
background-color: black;
}
#main {
width: 100%;
height: 500px;
text-align: center;
}
#footer {
width: 100%;
height: 80px;
background-color: black;
clear:both;
}

前の続きです。

次へ続きます。

userCreateConfirm.jspの作成

</style>

</head>
<body>

<div id="header">

<div id="pr">
</div>

</div>
<div id="main">

<div id="top">

<p>UserCreateComplete</p>

</div>
<div>

<h3>ユーザーの登録が完了致しました。</h3>
<div>

<a href='<s:url action="HomeAction" />'>ログインへ</a>

</div>

</div>

</div>

前の続きです。

次へ続きます。

userCreateComplete.jspの作成

<div id="footer">

<div id="pr">
</div>

</div>

</body>
</html>

前の続きです。

userCreateComplete.jspの作成

userCreateComplete.jspの画面

上記の画面が表示できれば成功です。